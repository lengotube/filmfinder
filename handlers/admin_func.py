from loader import bot, dp
from aiogram import types
from aiogram.dispatcher import FSMContext
from myFilters.admin import IsAdminM
from states import admin as astate
from data.db import add_film, only_list, get_AllUser, delete_Film, add_Chennel, delete_Chennel, update_kbname_player, update_wellcome_text, get_AllText, get_AllSearch, get_Allplayer, get_AllFilms, get_AllChennel, get_AllFranchise, add_franchise, delete_franchise, get_Allfavourite, add_filmname, get_filmname, cs, sql
from keybord_s.admin import get_Player_menu
from keybord_s.ohter import ikb_back, ikb_close, ikb_back_oikb
import json
from datetime import datetime
from misc.search_film import search

@dp.channel_post_handler(text='/get_id')
async def get_id(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text=message.chat.id)

#—Ä–∞—Å—Å—ã–ª–∫–∞#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.myling_list.text, content_types=types.ContentTypes.ANY)
async def myling_list(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data_user=await only_list(await get_AllUser(type='user_id'))
        count_accept=0
        count_error=0
        ikb=types.InlineKeyboardMarkup(row_width=1)
        for i in data['ikb_list']:
            ikb.row(i)
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text=f'<b>–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–∏\n–¢–µ–∫—Å—Ç: "{message.text}"\n‚úÖ–£—Å–ø–µ—à–Ω–æ: {count_accept}\n‚ùå–û—à–∏–±–∫–∏: {count_error}</b>', parse_mode=types.ParseMode.HTML)
        for i in data_user:
            try:
                count_accept+=1
                await bot.copy_message(chat_id=i, from_chat_id=message.from_user.id, message_id=message.message_id, reply_markup=ikb)
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text=f'<b>–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–∏\n–¢–µ–∫—Å—Ç: "{message.text}"\n‚úÖ–£—Å–ø–µ—à–Ω–æ: {count_accept}\n‚ùå–û—à–∏–±–∫–∏: {count_error}</b>', parse_mode=types.ParseMode.HTML)
            except:
                count_error+=1
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text=f'<b>–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–∏\n–¢–µ–∫—Å—Ç: "{message.text}"\n‚úÖ–£—Å–ø–µ—à–Ω–æ: {count_accept}\n‚ùå–û—à–∏–±–∫–∏: {count_error}</b>', parse_mode=types.ParseMode.HTML)
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text=f'<b>–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–∏\n–¢–µ–∫—Å—Ç: "{message.text}"\n‚úÖ–£—Å–ø–µ—à–Ω–æ: {count_accept}\n‚ùå–û—à–∏–±–∫–∏: {count_error}\n–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞üîî</b>', parse_mode=types.ParseMode.HTML, reply_markup=ikb_close)
    await state.finish()

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.myling_list.add_ikb.text)
async def add_ikb_milling_text(message: types.Message, state: FSMContext):
    await message.delete()
    ikb=types.InlineKeyboardMarkup(row_width=1)
    ikb.row(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥üîô', callback_data='back_to_text_milling'))
    async with state.proxy() as data:
        data['text_ikb']=message.text
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µüìù', reply_markup=ikb)
    await astate.Admin_State.myling_list.add_ikb.url.set()
    
@dp.message_handler(IsAdminM(), state=astate.Admin_State.myling_list.add_ikb.url)
async def add_ikb_milling_url(message: types.Message, state: FSMContext):
    await message.delete()
    ikb=types.InlineKeyboardMarkup(row_width=1)
    ikb.row(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É‚ñ∂Ô∏è', callback_data='add_ikb_milling_admin'))
    ikb.row(ikb_back_oikb)
    
    async with state.proxy() as data:
        try:
            ikb_test_ikb=types.InlineKeyboardMarkup().row({'text' : data['text_ikb'], 'url' : message.text})
            test_msg=await message.answer('–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏...', reply_markup=ikb_test_ikb)
            await test_msg.delete()
            data['ikb_list'].append({'text' : data['text_ikb'], 'url' : message.text})
            try:
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'],  text='–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚ûï\n\n–•–æ—Ä–æ—à–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏‚úíÔ∏è\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É‚úÇÔ∏è', reply_markup=ikb)
            except:
                pass
        except:
            try:
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'],  text='–ö–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞(–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—ã–ª–ª–∫–∞)‚ùå\n\n–•–æ—Ä–æ—à–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏‚úíÔ∏è\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É‚úÇÔ∏è', reply_markup=ikb)
            except:
                pass
            pass

    await astate.Admin_State.myling_list.text.set()

#–ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Ç —Ñ–∏–ª—å–º–∞#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.add_film.code)
async def state_add_film_code(message: types.Message, state: FSMContext):
    
    async with state.proxy() as data:
        data['code']=message.text
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–•–æ—Ä–æ—à–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µüé´', reply_markup=ikb_back)
    await astate.Admin_State.add_film.name.set()

#–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Ñ–∏–ª—å–º–∞#
@dp.message_handler(IsAdminM(),state=astate.Admin_State.add_film.name)
async def state_add_film_name(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        data['name']=message.text
    try:
        data_film=await search(name_film=message.text)
        await state.finish()
        s = await add_filmname(data['name'])
        await add_film(code=data['code'], name=data['name'], priv=data_film.photo_, id=s)
        await message.answer_photo(photo=data_film.photo_, caption=f'üìå–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω\nüîë–ö–æ–¥: <code>{data["code"]}</code>\nüé´–ù–∞–∑–≤–∞–Ω–∏–µ: {data["name"]}', reply_markup=ikb_close, parse_mode=types.ParseMode.HTML)
    except:
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ù–µ –Ω–∞—à–µ–ª –Ω–∞ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–µ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±–ª–æ–∂–∫–∏üìå', reply_markup=ikb_back)
        await astate.Admin_State.add_film.priew.set()

#–ø–∞–ª—É—á–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.add_film.priew, content_types=['photo','text'])
async def state_add_film_priew(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        await bot.delete_message(chat_id=message.chat.id, message_id=data['message_id'])
        try:
            s = await add_filmname(data['name'])
            await add_film(code=data['code'], name=data['name'], priv=message.text if message.text else message.photo[-1].file_id, id=s)
            await message.answer_photo(photo=message.text if message.text else message.photo[-1].file_id, caption=f'üìå–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω\nüîë–ö–æ–¥: <code>{data["code"]}</code>\nüé´–ù–∞–∑–≤–∞–Ω–∏–µ: {data["name"]}', reply_markup=ikb_close, parse_mode=types.ParseMode.HTML)
        except Exception as ex:
            print(ex)
            await message.answer('–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω\n–û—Ç–º–µ–Ω–∞‚ùå', reply_markup=ikb_close)
    await state.finish()

#–µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.add_film.priew)
async def state_add_film_priew_no_photo(message: types.Message, state: FSMContext):

    await message.delete()
    async with state.proxy() as data:
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ñ–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüò°\n–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±–ª–æ–∂–∫–∏üìå', reply_markup=ikb_back)
        except:
            pass

#—É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.delete_film.code)
async def delete_film(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        try:
            chennel_identifier=int(message.text)
        except:
            chennel_identifier=message.text
        if await delete_Film(code=chennel_identifier):
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ‚ùé', reply_markup=ikb_close)
            await state.finish()
        else:
            try:
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ù–µ—Ç —Ç–æ–∫–æ–≥–æ –∫–æ–¥–∞‚ùå', reply_markup=ikb_back)
            except:
                pass

#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.add_chennel.username)
async def add_chennel(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        try:
            chennel_identifier=int(message.text)
        except:
            chennel_identifier=message.text
        try:
            await bot.get_chat_member(chat_id=chennel_identifier, user_id=message.from_user.id)
            chat=await bot.get_chat(chat_id=chennel_identifier)
            me=await bot.get_me()
            link_chat=await bot.create_chat_invite_link(chat_id=chennel_identifier, name=f'–í—Ö–æ–¥ –æ—Ç {me.mention}')
            try:
                await add_Chennel(chennel_identifier=chennel_identifier, name=chat.full_name, link=link_chat.invite_link)
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ', reply_markup=ikb_close)
                await state.finish()
            except:
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ωü´§', reply_markup=ikb_back)
        except:
            try:
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ò–∑–≤–∏–Ω–∏—Ç–µ —É –º–µ–Ω—è —Ç–∞–º –Ω–µ—Ç –ø—Ä–∞–≤ "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" –∏ "—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—ã–ª–ª–∫–∞–º–∏"‚ùå', reply_markup=ikb_back)
            except:
                pass

#–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.delete_chennel.username)
async def delete_chennel(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        if await delete_Chennel(chennel_identifier=message.text):
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ‚úÖ', reply_markup=ikb_close)
            await state.finish()
        else:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ò–∑–≤–∏–Ω–∏—Ç–µ –≤—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª‚ùå', reply_markup=ikb_back)
    
@dp.message_handler(IsAdminM(), state=astate.Admin_State.chennger_kbname_player.text)
async def chennger_kbname_player(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        await update_kbname_player(player_name=data['name_kb'], kb=message.text)
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id1'], text='–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ', reply_markup=ikb_close)
        await bot.edit_message_reply_markup(chat_id=message.from_user.id, message_id=data['message_id2'], reply_markup=await get_Player_menu())
        await state.finish()

#–ò–∑–º–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ–¥—Å—Ç–≤–∏—è#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.chennger_wellcome_text.text)
async def chennger_wellcome_text(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text=message.text, parse_mode=types.ParseMode.HTML)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–£—Å–ø–µ—à–Ω–æ –∏–∑–º–∏–Ω–∏–ª —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è‚úÖ', reply_markup=ikb_close)
            await state.finish()
            await update_wellcome_text(text_type='wellcome', text=message.text)
        except:
            try:
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ HTML‚úÇÔ∏è', reply_markup=ikb_back)
            except:
                pass

#–ò—â–º–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ñ–∏–ª—å–º–∞#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.chennger_film_text.text)
async def chennger_wellcome_text(message: types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        try:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text=message.text, parse_mode=types.ParseMode.HTML)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–£—Å–ø–µ—à–Ω–æ –∏–∑–º–∏–Ω–∏–ª —Ç–µ–∫—Å—Ç —Ñ–∏–ª—å–º–∞‚úÖ', reply_markup=ikb_close)
            await update_wellcome_text(text_type='film', text=message.text)
            await state.finish()
        except:
            try:
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ HTML‚úÇÔ∏è', reply_markup=ikb_back)
            except:
                pass

#—ç–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞#
@dp.message_handler(IsAdminM(), commands=['export'])
async def export_cfg(message: types.Message):
    dict_cfg=dict()
    dict_cfg['user_data']=await get_AllUser()
    dict_cfg['text_data']=await get_AllText()
    dict_cfg['search_data']=await get_AllSearch()
    dict_cfg['player_data']=await get_Allplayer()
    dict_cfg['films_data']=await get_AllFilms()
    dict_cfg['chennel_data']=await get_AllChennel()
    dict_cfg['franchise_data']=await get_AllFranchise()
    dict_cfg['favourites_data']=await get_Allfavourite()
    patch_json=f'data//cash_config//config{str(datetime.now())}.json'.replace(':', '.')
    file_json=open(file=patch_json, mode='w', encoding='UTF-8')
    json_dump = json.dump(dict_cfg, file_json, indent=2)
    file_json.close()
    await bot.send_document(chat_id=message.from_user.id, document=open(file=patch_json, mode='rb'), reply_markup=ikb_close)

#–∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞#
@dp.message_handler(IsAdminM(), text='/import')
async def export_cfg(message: types.Message, state: FSMContext):
    masg=await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª .jsonüì•', reply_markup=ikb_back)
    async with state.proxy() as data:
        data['message_id']=masg.message_id
    await astate.Admin_State.import_cfg.file.set()

#–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞#
@dp.message_handler(IsAdminM(), state=astate.Admin_State.import_cfg.file, content_types=types.ContentTypes.DOCUMENT)
async def get_filte_import(message: types.Message, state: FSMContext):
    await message.delete()
    if message.document.mime_type != 'application/json':
        async with state.proxy() as data:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª .json‚ôªÔ∏è', reply_markup=ikb_back)
            return
            
    json_cfg=await message.document.download(destination_dir='data//cash_config')
    with open(json_cfg.name, 'r') as json_file:
        data_import=json.loads(json_file.read())
    patch_logs=f'data//cash_config//log_import{str(datetime.now())}.txt'.replace(':', '.')
    file_logs_update=open(patch_logs, 'w+', encoding='UTF-8')
    async with state.proxy() as data:
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['message_id'], text='<b>–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞...</b>',parse_mode=types.ParseMode.HTML)
    if data_import.get('user_data') != None:
        for i in data_import.get('user_data'):
            try:
                data_user=[i[0], i[1], i[2], i[3]]
                cs.execute("INSERT INTO user_data VALUES(?, ?, ?, ?)", data_user)
                file_logs_update.write(f'–î–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {i[1]}\n')
            except:
                file_logs_update.write(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {i[1]}\n')
        file_logs_update.write('\n\n')

    if data_import.get('text_data') != None:
        for i in data_import.get('text_data'):
            cs.execute(f"UPDATE text_data SET text_text = '{i[1]}' WHERE text_type = '{i[0]}'")
            file_logs_update.write(f'–ò–∑–º–∏–Ω–∏–ª–ª {i[0]} –Ω–∞: {i[1]}\n')
        file_logs_update.write('\n\n')

    if data_import.get('search_data') != None:
        for i in data_import.get('search_data'):
            data_search=[i[0], i[1]]
            try:
                cs.execute("INSERT INTO search_data VALUES(?, ?)", data_search)
                file_logs_update.write(f'–î–æ–±–∞–≤–∏–ª –∏—Å—Ç—Ä–∏—é –ø–æ–∏—Å–∫–∞: {i[0]}({i[1]})\n')
            except:
                file_logs_update.write(f'–ù–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞: {i[0]}({i[1]})\n')
        file_logs_update.write('\n\n')

    if data_import.get('player_data') != None:
        for i in data_import.get('player_data'):
            cs.execute(f"UPDATE player_data SET kb_name = '{i[3]}' WHERE player_name = '{i[1]}'")
            file_logs_update.write(f'–ò–∑–º–∏–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–µ–µ—Ä–∞: {i[0]}\n')
        file_logs_update.write('\n\n')

    if data_import.get('films_data') != None:
        for i in data_import.get('films_data'):
            try:
                data_films=[i[0], i[1], i[2]]
                cs.execute("INSERT INTO films_data VALUES(?, ?, ?)", data_films)
                file_logs_update.write(f'–î–æ–±–∞–≤–∏–ª —Ñ–∏–ª—å–º: {i[1]}({i[0]})\n')
            except:
                file_logs_update.write(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, —Ñ–∏–ª—å–º–∞: {i[1]}({i[0]})\n')
        file_logs_update.write('\n\n')

    if data_import.get('chennel_data') != None:
        for i in data_import.get('chennel_data'):
            try:
                data_chennel=[i[0], i[1], i[2]]
                cs.execute("INSERT INTO chennel_data VALUES(?, ?, ?)", data_chennel)
                file_logs_update.write(f'–î–æ–±–∞–≤–∏–ª –∫–∞–Ω–∞–ª: {i[1]}({i[0]})\n')
            except:
                file_logs_update.write(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, –∫–∞–Ω–∞–ª–∞: {i[1]}({i[0]})\n')
        file_logs_update.write('\n\n')

    if data_import.get('franchise_data') != None:
        for i in data_import.get('franchise_data'):
            try:
                data_franchise=[i[0], i[1]]
                cs.execute("INSERT INTO franchise_data VALUES(?, ?)", data_franchise)
                file_logs_update.write(f'–î–æ–±–∞–≤–∏–ª –æ–±—ä–µ–∫—Ç –≤ —Ñ—Ä–∞–Ω—à–∏–∑—É: {i[1]}({i[0]})\n')
            except:
                file_logs_update.write(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, –æ–±—ä–µ–∫—Ç –≤ —Ñ—Ä–∞–Ω—à–∏–∑—É: {i[1]}({i[0]})\n')
        file_logs_update.write('\n\n')
                
    if data_import.get('favourites_data') != None:
        counter_fav=int()
        for i in data_import.get('favourites_data'):
            data_favourites=[i[0], i[1]]
            cs.execute("INSERT INTO favourites_data VALUES(?, ?)", data_favourites)
            counter_fav+=1
        file_logs_update.write(f'–í–æ–∑–æ–±–Ω–æ–≤–∏–ª –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –≤—Å–µ–≥–æ {counter_fav}')
    file_logs_update.close()
    sql.commit()
    async with state.proxy() as data:
        await bot.delete_message(chat_id=message.from_user.id, message_id=data['message_id'])
    await bot.send_document(chat_id=message.from_user.id, document=open(file=patch_logs, mode='rb'), caption='<b>–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω‚úÖ\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–µ –≤—ã—à–µüìÑ</b>', reply_markup=ikb_close, parse_mode=types.ParseMode.HTML)
    await state.finish()